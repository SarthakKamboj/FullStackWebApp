{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Sarthak\\\\TypeScipt-GraphQL-Postgres-React-Tut\\\\front-end\\\\src\\\\pages\\\\register.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport { toErrorMap } from './../utils/toErrorMap';\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { useState } from 'react';\n\nvar Register = function Register() {\n  _s();\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors;\n\n  var router = useRouter();\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      registerUser = _useRegisterMutation2[1];\n\n  var _useState = useState({}),\n      submissionErrs = _useState[0],\n      setSubmissionErrs = _useState[1];\n\n  var _useState2 = useState(0),\n      numSubmissionErrs = _useState2[0],\n      setNumSubmissionErrs = _useState2[1];\n\n  var _useState3 = useState(false),\n      showSuccessMsg = _useState3[0],\n      setShowSuccessMsg = _useState3[1];\n\n  var onSubmit = handleSubmit( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var _response$data, _response$data2;\n\n      var response, errorMap;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return registerUser(data);\n\n            case 2:\n              response = _context.sent;\n\n              if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.register.errors) {\n                errorMap = toErrorMap(response.data.register.errors);\n                setSubmissionErrs(errorMap);\n                setNumSubmissionErrs(Object.keys(errorMap).length);\n              } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.register.user) {\n                setShowSuccessMsg(true);\n                router.push(\"/\");\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Register Page\", __jsx(\"form\", {\n    onSubmit: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    ref: register({\n      required: true\n    }),\n    name: \"username\",\n    placeholder: \"Username\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }), __jsx(\"input\", {\n    type: \"password\",\n    ref: register({\n      required: \"Password required\",\n      minLength: {\n        value: 2,\n        message: \"Password is too short\"\n      }\n    }),\n    name: \"password\",\n    placeholder: \"Password\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"Submit \"), errors.password && errors.password.message), numSubmissionErrs !== 0 ? Object.keys(submissionErrs).map(function (errKey) {\n    return submissionErrs[errKey];\n  }) : \"\", showSuccessMsg ? \"User created\" : \"\");\n};\n\n_s(Register, \"S2OC5PiqKZ56zDbiGUXkHcsxtgc=\", false, function () {\n  return [useForm, useRouter, useRegisterMutation];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Sarthak/TypeScipt-GraphQL-Postgres-React-Tut/front-end/src/pages/register.tsx"],"names":["useRouter","toErrorMap","React","useForm","useRegisterMutation","useState","Register","register","handleSubmit","errors","router","registerUser","submissionErrs","setSubmissionErrs","numSubmissionErrs","setNumSubmissionErrs","showSuccessMsg","setShowSuccessMsg","onSubmit","data","response","errorMap","Object","keys","length","user","push","required","minLength","value","message","password","map","errKey"],"mappings":"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","sourcesContent":["import {useRouter} from \"next/router\";\r\nimport { toErrorMap } from './../utils/toErrorMap';\r\nimport * as React from \"react\"\r\nimport {useForm} from \"react-hook-form\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\nimport { useState } from 'react';\r\n\r\ntype formType = {\r\n    username: string\r\n    password: string\r\n}\r\n\r\nconst Register: React.FC = () => {\r\n    \r\n    const {register, handleSubmit, errors} = useForm<formType>();\r\n    const router = useRouter();\r\n    const [,registerUser] = useRegisterMutation();\r\n    const [submissionErrs, setSubmissionErrs] = useState({});\r\n    const [numSubmissionErrs, setNumSubmissionErrs] = useState(0);\r\n    const [showSuccessMsg, setShowSuccessMsg] = useState(false);\r\n\r\n    const onSubmit = handleSubmit(async (data) => {\r\n       const response = await registerUser(data);\r\n       if (response.data?.register.errors) {\r\n            const errorMap = toErrorMap(response.data.register.errors);\r\n            setSubmissionErrs(errorMap);\r\n            setNumSubmissionErrs(Object.keys(errorMap).length);\r\n       } else if (response.data?.register.user) {\r\n           setShowSuccessMsg(true);\r\n           router.push(\"/\")\r\n       }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            Register Page\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\" ref={register({required:true})} name=\"username\" placeholder=\"Username\" />\r\n                <input type=\"password\" ref={register({required:\"Password required\", minLength:{value:2, message:\"Password is too short\"}})} name=\"password\" placeholder=\"Password\" />\r\n                <button type='submit'>Submit </button>\r\n                {errors.password && errors.password.message}\r\n            </form> \r\n            {(numSubmissionErrs !== 0) ? Object.keys(submissionErrs).map(errKey => submissionErrs[errKey]): \"\"}\r\n            {(showSuccessMsg) ? \"User created\" : \"\"} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}