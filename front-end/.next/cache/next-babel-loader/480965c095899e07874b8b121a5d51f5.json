{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sarthak\\\\TypeScipt-GraphQL-Postgres-React-Tut\\\\front-end\\\\src\\\\pages\\\\register.tsx\";\nvar __jsx = React.createElement;\n// @ts-nocheck\nimport { toErrorMap } from './../utils/toErrorMap';\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRegisterMutation } from \"../generated/graphql\";\n\nconst Register = () => {\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const [, registerUser] = useRegisterMutation();\n  const [submissionErrs, setSubmissionErrs] = useState({});\n  const [numSubmissionErrs, setNumSubmissionErrs] = useState(0);\n  const onSubmit = handleSubmit(async data => {\n    var _response$data;\n\n    const response = await registerUser(data);\n\n    if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.register.errors) {\n      const errorMap = toErrorMap(response.data.register.errors);\n      setSubmissionErrs(errorMap);\n      setNumSubmissionErrs(errorMap.keys().length);\n    }\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"Register Page\", __jsx(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    ref: register({\n      required: true\n    }),\n    name: \"username\",\n    placeholder: \"Username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }), __jsx(\"input\", {\n    type: \"password\",\n    ref: register({\n      required: \"Password required\",\n      minLength: {\n        value: 8,\n        message: \"Password is too short\"\n      }\n    }),\n    name: \"password\",\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, \"Submit \"), errors.password && errors.password.message), numSubmissionErrs !== 0 ? submissionErrs.keys().forEach(errKey => submissionErrs[errKey]) : \"\");\n};\n\nexport default Register;","map":{"version":3,"sources":["C:/Sarthak/TypeScipt-GraphQL-Postgres-React-Tut/front-end/src/pages/register.tsx"],"names":["toErrorMap","React","useForm","useRegisterMutation","Register","register","handleSubmit","errors","registerUser","submissionErrs","setSubmissionErrs","useState","numSubmissionErrs","setNumSubmissionErrs","onSubmit","data","response","errorMap","keys","length","required","minLength","value","message","password","forEach","errKey"],"mappings":";;AAAA;AAEA,SAASA,UAAT,QAA2B,uBAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,SAASC,mBAAT,QAAoC,sBAApC;;AAOA,MAAMC,QAAkB,GAAG,MAAM;AAE7B,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAAmCL,OAAO,EAAhD;AAEA,QAAM,GAAEM,YAAF,IAAkBL,mBAAmB,EAA3C;AACA,QAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsCC,QAAQ,CAAG,EAAH,CAApD;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CF,QAAQ,CAAC,CAAD,CAA1D;AAEA,QAAMG,QAAQ,GAAGR,YAAY,CAAC,MAAOS,IAAP,IAAgB;AAAA;;AAC3C,UAAMC,QAAQ,GAAG,MAAMR,YAAY,CAACO,IAAD,CAAnC;;AACA,0BAAIC,QAAQ,CAACD,IAAb,mDAAI,eAAeV,QAAf,CAAwBE,MAA5B,EAAoC;AAC/B,YAAMU,QAAQ,GAAGjB,UAAU,CAACgB,QAAQ,CAACD,IAAT,CAAcV,QAAd,CAAuBE,MAAxB,CAA3B;AACAG,MAAAA,iBAAiB,CAACO,QAAD,CAAjB;AACAJ,MAAAA,oBAAoB,CAACI,QAAQ,CAACC,IAAT,GAAgBC,MAAjB,CAApB;AACJ;AACH,GAP4B,CAA7B;AASA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAM,IAAA,QAAQ,EAAEL,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,GAAG,EAAET,QAAQ,CAAC;AAACe,MAAAA,QAAQ,EAAC;AAAV,KAAD,CAAhC;AAAmD,IAAA,IAAI,EAAC,UAAxD;AAAmE,IAAA,WAAW,EAAC,UAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,GAAG,EAAEf,QAAQ,CAAC;AAACe,MAAAA,QAAQ,EAAC,mBAAV;AAA+BC,MAAAA,SAAS,EAAC;AAACC,QAAAA,KAAK,EAAC,CAAP;AAAUC,QAAAA,OAAO,EAAC;AAAlB;AAAzC,KAAD,CAApC;AAA4H,IAAA,IAAI,EAAC,UAAjI;AAA4I,IAAA,WAAW,EAAC,UAAxJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,EAIKhB,MAAM,CAACiB,QAAP,IAAmBjB,MAAM,CAACiB,QAAP,CAAgBD,OAJxC,CAFJ,EAQMX,iBAAiB,KAAK,CAAvB,GAA4BH,cAAc,CAACS,IAAf,GAAsBO,OAAtB,CAA8BC,MAAM,IAAIjB,cAAc,CAACiB,MAAD,CAAtD,CAA5B,GAA8F,EARnG,CADJ;AAYH,CA7BD;;AA+BA,eAAetB,QAAf","sourcesContent":["// @ts-nocheck\r\n\r\nimport { toErrorMap } from './../utils/toErrorMap';\r\nimport * as React from \"react\"\r\nimport {useForm} from \"react-hook-form\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\n\r\ntype formType = {\r\n    username: string\r\n    password: string\r\n}\r\n\r\nconst Register: React.FC = () => {\r\n    \r\n    const {register, handleSubmit, errors} = useForm<formType>();\r\n\r\n    const [,registerUser] = useRegisterMutation();\r\n    const [submissionErrs, setSubmissionErrs] = useState<>({});\r\n    const [numSubmissionErrs, setNumSubmissionErrs] = useState(0);\r\n\r\n    const onSubmit = handleSubmit(async (data) => {\r\n       const response = await registerUser(data);\r\n       if (response.data?.register.errors) {\r\n            const errorMap = toErrorMap(response.data.register.errors);\r\n            setSubmissionErrs(errorMap);\r\n            setNumSubmissionErrs(errorMap.keys().length);\r\n       }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            Register Page\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\" ref={register({required:true})} name=\"username\" placeholder=\"Username\" />\r\n                <input type=\"password\" ref={register({required:\"Password required\", minLength:{value:8, message:\"Password is too short\"}})} name=\"password\" placeholder=\"Password\" />\r\n                <button type='submit'>Submit </button>\r\n                {errors.password && errors.password.message}\r\n            </form> \r\n            {(numSubmissionErrs !== 0) ? submissionErrs.keys().forEach(errKey => submissionErrs[errKey]) : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}