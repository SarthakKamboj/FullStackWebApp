{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!) {\n  register(options: {username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n    `;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;","map":{"version":3,"sources":["C:/Sarthak/TypeScipt-GraphQL-Postgres-React-Tut/front-end/src/generated/graphql.tsx"],"names":["gql","Urql","RegisterDocument","useRegisterMutation","useMutation"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AA8KA,OAAO,MAAMC,gBAAgB,GAAGF,GAAI;;;;;;;;;;;;;KAA7B;AAeP,OAAO,SAASG,mBAAT,GAA+B;AACpC,SAAOF,IAAI,CAACG,WAAL,CAA8DF,gBAA9D,CAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  users: Array<User>;\n  test_jwt: Scalars['String'];\n  cars: Array<Car>;\n  car: Car;\n  posts: Array<Post>;\n  post?: Maybe<Post>;\n  hello: Scalars['String'];\n  bye: Scalars['String'];\n};\n\n\nexport type QueryCarArgs = {\n  yearMade: Scalars['Int'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['Int'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  username: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  tokenVersion: Scalars['Int'];\n};\n\nexport type Car = {\n  __typename?: 'Car';\n  yearMade: Scalars['Int'];\n  company: Scalars['String'];\n  name: Scalars['String'];\n  cost: Scalars['Int'];\n  maxSpeed: Scalars['Int'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Int'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  title: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  revokeRefreshTokensForUser: RevokedRefreshTokenResponse;\n  login: UserResponse;\n  register: UserResponse;\n  createCar: Car;\n  updateCar?: Maybe<Car>;\n  deleteCar: Scalars['Boolean'];\n  createPost: Post;\n  updatePost?: Maybe<Post>;\n  deletePost: Scalars['Boolean'];\n};\n\n\nexport type MutationRevokeRefreshTokensForUserArgs = {\n  userId: Scalars['Int'];\n};\n\n\nexport type MutationLoginArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationCreateCarArgs = {\n  options: CreateCarInputType;\n};\n\n\nexport type MutationUpdateCarArgs = {\n  cost: Scalars['Int'];\n  yearMade: Scalars['Int'];\n};\n\n\nexport type MutationDeleteCarArgs = {\n  yearMade: Scalars['Int'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  title: Scalars['String'];\n};\n\n\nexport type MutationUpdatePostArgs = {\n  title: Scalars['String'];\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['Int'];\n};\n\nexport type RevokedRefreshTokenResponse = {\n  __typename?: 'RevokedRefreshTokenResponse';\n  errors?: Maybe<Array<FieldError>>;\n  refreshTokenRevoked: Scalars['Boolean'];\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n  accessToken?: Maybe<Scalars['String']>;\n};\n\nexport type UsernamePasswordInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type CreateCarInputType = {\n  yearMade: Scalars['Int'];\n  company: Scalars['String'];\n  name: Scalars['String'];\n  cost: Scalars['Int'];\n  maxSpeed: Scalars['Int'];\n};\n\nexport type RegisterMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    )> }\n  ) }\n);\n\n\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!) {\n  register(options: {username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n    `;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n};"]},"metadata":{},"sourceType":"module"}