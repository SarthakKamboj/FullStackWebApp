{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Sarthak\\\\TypeScipt-GraphQL-Postgres-React-Tut\\\\front-end\\\\src\\\\pages\\\\register.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { toErrorMap } from './../utils/toErrorMap';\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { useState } from 'react';\n\nvar Register = function Register() {\n  _s();\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors;\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      registerUser = _useRegisterMutation2[1];\n\n  var _useState = useState({}),\n      submissionErrs = _useState[0],\n      setSubmissionErrs = _useState[1];\n\n  var _useState2 = useState(0),\n      numSubmissionErrs = _useState2[0],\n      setNumSubmissionErrs = _useState2[1];\n\n  var onSubmit = handleSubmit( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var _response$data;\n\n      var response, errorMap;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return registerUser(data);\n\n            case 2:\n              response = _context.sent;\n\n              if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.register.errors) {\n                errorMap = toErrorMap(response.data.register.errors);\n                setSubmissionErrs(errorMap);\n                setNumSubmissionErrs(Object.keys(errorMap).length);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"Register Page\", __jsx(\"form\", {\n    onSubmit: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    ref: register({\n      required: true\n    }),\n    name: \"username\",\n    placeholder: \"Username\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }), __jsx(\"input\", {\n    type: \"password\",\n    ref: register({\n      required: \"Password required\",\n      minLength: {\n        value: 8,\n        message: \"Password is too short\"\n      }\n    }),\n    name: \"password\",\n    placeholder: \"Password\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, \"Submit \"), errors.password && errors.password.message), numSubmissionErrs !== 0 ? Object.keys(submissionErrs).forEach(function (errKey) {\n    return submissionErrs[errKey];\n  }) : \"\");\n};\n\n_s(Register, \"KfZd11fFvZPRvL7xeLqjxN4Ic9I=\", false, function () {\n  return [useForm, useRegisterMutation];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Sarthak/TypeScipt-GraphQL-Postgres-React-Tut/front-end/src/pages/register.tsx"],"names":["toErrorMap","React","useForm","useRegisterMutation","useState","Register","register","handleSubmit","errors","registerUser","submissionErrs","setSubmissionErrs","numSubmissionErrs","setNumSubmissionErrs","onSubmit","data","response","errorMap","Object","keys","length","required","minLength","value","message","password","forEach","errKey"],"mappings":";;;;;;;;;AACA,SAASA,UAAT,QAA2B,uBAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAOA,IAAMC,QAAkB,GAAG,SAArBA,QAAqB,GAAM;AAAA;;AAAA,iBAEYH,OAAO,EAFnB;AAAA,MAEtBI,QAFsB,YAEtBA,QAFsB;AAAA,MAEZC,YAFY,YAEZA,YAFY;AAAA,MAEEC,MAFF,YAEEA,MAFF;;AAAA,6BAILL,mBAAmB,EAJd;AAAA;AAAA,MAIrBM,YAJqB;;AAAA,kBAKeL,QAAQ,CAAC,EAAD,CALvB;AAAA,MAKtBM,cALsB;AAAA,MAKNC,iBALM;;AAAA,mBAMqBP,QAAQ,CAAC,CAAD,CAN7B;AAAA,MAMtBQ,iBANsB;AAAA,MAMHC,oBANG;;AAQ7B,MAAMC,QAAQ,GAAGP,YAAY;AAAA,wEAAC,iBAAOQ,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACJN,YAAY,CAACM,IAAD,CADR;;AAAA;AACrBC,cAAAA,QADqB;;AAE3B,oCAAIA,QAAQ,CAACD,IAAb,mDAAI,eAAeT,QAAf,CAAwBE,MAA5B,EAAoC;AACzBS,gBAAAA,QADyB,GACdjB,UAAU,CAACgB,QAAQ,CAACD,IAAT,CAAcT,QAAd,CAAuBE,MAAxB,CADI;AAE/BG,gBAAAA,iBAAiB,CAACM,QAAD,CAAjB;AACAJ,gBAAAA,oBAAoB,CAACK,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,MAAvB,CAApB;AACJ;;AAN0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MAA7B;AASA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAM,IAAA,QAAQ,EAAEN,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,GAAG,EAAER,QAAQ,CAAC;AAACe,MAAAA,QAAQ,EAAC;AAAV,KAAD,CAAhC;AAAmD,IAAA,IAAI,EAAC,UAAxD;AAAmE,IAAA,WAAW,EAAC,UAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,GAAG,EAAEf,QAAQ,CAAC;AAACe,MAAAA,QAAQ,EAAC,mBAAV;AAA+BC,MAAAA,SAAS,EAAC;AAACC,QAAAA,KAAK,EAAC,CAAP;AAAUC,QAAAA,OAAO,EAAC;AAAlB;AAAzC,KAAD,CAApC;AAA4H,IAAA,IAAI,EAAC,UAAjI;AAA4I,IAAA,WAAW,EAAC,UAAxJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,EAIKhB,MAAM,CAACiB,QAAP,IAAmBjB,MAAM,CAACiB,QAAP,CAAgBD,OAJxC,CAFJ,EAQMZ,iBAAiB,KAAK,CAAvB,GAA4BM,MAAM,CAACC,IAAP,CAAYT,cAAZ,EAA4BgB,OAA5B,CAAoC,UAAAC,MAAM;AAAA,WAAIjB,cAAc,CAACiB,MAAD,CAAlB;AAAA,GAA1C,CAA5B,GAAoG,EARzG,CADJ;AAYH,CA7BD;;GAAMtB,Q;UAEuCH,O,EAEjBC,mB;;;KAJtBE,Q;AA+BN,eAAeA,QAAf","sourcesContent":["\r\nimport { toErrorMap } from './../utils/toErrorMap';\r\nimport * as React from \"react\"\r\nimport {useForm} from \"react-hook-form\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\nimport { useState } from 'react';\r\n\r\ntype formType = {\r\n    username: string\r\n    password: string\r\n}\r\n\r\nconst Register: React.FC = () => {\r\n    \r\n    const {register, handleSubmit, errors} = useForm<formType>();\r\n\r\n    const [,registerUser] = useRegisterMutation();\r\n    const [submissionErrs, setSubmissionErrs] = useState({});\r\n    const [numSubmissionErrs, setNumSubmissionErrs] = useState(0);\r\n\r\n    const onSubmit = handleSubmit(async (data) => {\r\n       const response = await registerUser(data);\r\n       if (response.data?.register.errors) {\r\n            const errorMap = toErrorMap(response.data.register.errors);\r\n            setSubmissionErrs(errorMap);\r\n            setNumSubmissionErrs(Object.keys(errorMap).length);\r\n       }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            Register Page\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\" ref={register({required:true})} name=\"username\" placeholder=\"Username\" />\r\n                <input type=\"password\" ref={register({required:\"Password required\", minLength:{value:8, message:\"Password is too short\"}})} name=\"password\" placeholder=\"Password\" />\r\n                <button type='submit'>Submit </button>\r\n                {errors.password && errors.password.message}\r\n            </form> \r\n            {(numSubmissionErrs !== 0) ? Object.keys(submissionErrs).forEach(errKey => submissionErrs[errKey]) : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}